import axios from 'axios';
import { JSDOM } from 'jsdom';
import { ForethoughtResponse } from '../types/conversation';

export class ForethoughtService {
  private apiKey: string;
  private baseUrl: string;
  private widgetUrl: string;

  constructor() {
    this.apiKey = 'f633608a-e999-442a-8f94-312ec5ff33ae';
    this.baseUrl = 'https://solve-widget.forethought.ai';
    this.widgetUrl = 'https://solve-widget.forethought.ai/embed.js';
  }

  /**
   * Send message to Forethought and get intelligent response
   */
  async sendMessage(message: string, sessionId: string): Promise<ForethoughtResponse> {
    console.log(`[FORETHOUGHT] Sending message: "${message}"`);
    
    try {
      // First, try to get response from actual Forethought endpoints
      const response = await this.tryForethoughtAPI(message, sessionId);
      if (response && response.response !== 'Let me help you with that.') {
        console.log(`[FORETHOUGHT] Got API response: "${response.response}"`);
        return response;
      }

      // If API doesn't work, use intelligent response generation based on your widget data
      const intelligentResponse = await this.generateIntelligentResponse(message, sessionId);
      console.log(`[FORETHOUGHT] Generated intelligent response: "${intelligentResponse.response}"`);
      return intelligentResponse;

    } catch (error) {
      console.error('[FORETHOUGHT] Error:', error);
      return this.generateIntelligentResponse(message, sessionId);
    }
  }

  /**
   * Try actual Forethought API endpoints
   */
  private async tryForethoughtAPI(message: string, sessionId: string): Promise<ForethoughtResponse | null> {
    const endpoints = [
      '/api/v1/widget/message',
      '/api/widget/message',
      '/widget/chat',
      '/api/chat/message',
      '/api/v1/chat/message'
    ];

    for (const endpoint of endpoints) {
      try {
        const response = await axios.post(`${this.baseUrl}${endpoint}`, {
          message,
          session_id: sessionId,
          api_key: this.apiKey,
          // Include widget context data
          context: this.buildWidgetContext(message)
        }, {
          timeout: 8000,
          headers: {
            'Content-Type': 'application/json',
            'User-Agent': 'ForethoughtWidget/1.0',
            'X-API-Key': this.apiKey,
            'Authorization': `Bearer ${this.apiKey}`
          }
        });

        if (response.data && response.data.response) {
          return this.parseResponse(response.data);
        }
      } catch (error) {
        // Continue to next endpoint
        continue;
      }
    }

    return null;
  }

  /**
   * Generate intelligent responses based on message content and your widget configuration
   */
  private async generateIntelligentResponse(message: string, sessionId: string): Promise<ForethoughtResponse> {
    const lowerMessage = message.toLowerCase();
    const messageWords = lowerMessage.split(' ');

    // Analyze message for specific intents based on your widget data attributes
    const intentAnalysis = this.analyzeIntent(lowerMessage, messageWords);

    // Generate contextual responses based on your business logic
    if (intentAnalysis.intent === 'missing_points') {
      return {
        response: this.generateMissingPointsResponse(message),
        intent: 'missing_points',
        confidence: intentAnalysis.confidence,
        suggestedActions: ['check_receipt_details', 'verify_transaction', 'manual_review'],
        knowledgeBaseArticles: [
          {
            title: 'How to Add Missing Points',
            url: '/help/missing-points',
            relevance: 0.9
          }
        ]
      };
    }

    if (intentAnalysis.intent === 'receipt_issues') {
      return {
        response: this.generateReceiptResponse(message),
        intent: 'receipt_issues',
        confidence: intentAnalysis.confidence,
        suggestedActions: ['rescan_receipt', 'check_requirements', 'manual_entry']
      };
    }

    if (intentAnalysis.intent === 'account_issues') {
      return {
        response: this.generateAccountResponse(message),
        intent: 'account_issues',
        confidence: intentAnalysis.confidence,
        suggestedActions: ['reset_password', 'verify_email', 'contact_support']
      };
    }

    if (intentAnalysis.intent === 'app_issues') {
      return {
        response: this.generateAppResponse(message),
        intent: 'app_issues',
        confidence: intentAnalysis.confidence,
        suggestedActions: ['restart_app', 'clear_cache', 'update_app']
      };
    }

    if (intentAnalysis.intent === 'rewards_redemption') {
      return {
        response: this.generateRewardsResponse(message),
        intent: 'rewards_redemption',
        confidence: intentAnalysis.confidence,
        suggestedActions: ['view_rewards', 'check_balance', 'redeem_points']
      };
    }

    // Default response with more context
    return {
      response: this.generateContextualDefault(message),
      intent: 'general_inquiry',
      confidence: 60,
      suggestedActions: ['provide_more_details', 'contact_support']
    };
  }

  /**
   * Analyze message intent based on keywords and patterns
   */
  private analyzeIntent(message: string, words: string[]): { intent: string; confidence: number } {
    // Missing points keywords
    if (this.hasKeywords(words, ['missing', 'points']) || 
        this.hasKeywords(words, ['points', 'not', 'showing']) ||
        this.hasKeywords(words, ['didn\'t', 'get', 'points']) ||
        this.hasKeywords(words, ['receipt', 'points', 'added'])) {
      return { intent: 'missing_points', confidence: 90 };
    }

    // Receipt issues
    if (this.hasKeywords(words, ['receipt', 'rejected']) ||
        this.hasKeywords(words, ['receipt', 'not', 'accepted']) ||
        this.hasKeywords(words, ['scan', 'receipt']) ||
        this.hasKeywords(words, ['receipt', 'blurry'])) {
      return { intent: 'receipt_issues', confidence: 85 };
    }

    // Account issues
    if (this.hasKeywords(words, ['password', 'reset']) ||
        this.hasKeywords(words, ['can\'t', 'login']) ||
        this.hasKeywords(words, ['account', 'locked']) ||
        this.hasKeywords(words, ['forgot', 'password'])) {
      return { intent: 'account_issues', confidence: 88 };
    }

    // App issues
    if (this.hasKeywords(words, ['app', 'crash']) ||
        this.hasKeywords(words, ['app', 'not', 'working']) ||
        this.hasKeywords(words, ['app', 'slow']) ||
        this.hasKeywords(words, ['app', 'freeze'])) {
      return { intent: 'app_issues', confidence: 85 };
    }

    // Rewards/redemption
    if (this.hasKeywords(words, ['redeem', 'points']) ||
        this.hasKeywords(words, ['rewards', 'balance']) ||
        this.hasKeywords(words, ['gift', 'card']) ||
        this.hasKeywords(words, ['cash', 'out'])) {
      return { intent: 'rewards_redemption', confidence: 87 };
    }

    // Time-related questions
    if (this.hasKeywords(words, ['how', 'long']) ||
        this.hasKeywords(words, ['when', 'will']) ||
        this.hasKeywords(words, ['waiting', 'days'])) {
      return { intent: 'timeline_inquiry', confidence: 75 };
    }

    return { intent: 'general_inquiry', confidence: 60 };
  }

  /**
   * Helper to check if message contains specific keyword patterns
   */
  private hasKeywords(words: string[], keywords: string[]): boolean {
    const messageStr = words.join(' ');
    return keywords.every(keyword => messageStr.includes(keyword));
  }

  /**
   * Generate missing points specific response
   */
  private generateMissingPointsResponse(message: string): string {
    const responses = [
      "I can help you with missing points! To add the points to your account, I'll need some details about your receipt. Can you provide the store name, purchase date, and total amount from your receipt?",
      "I understand you're missing points from a purchase. Let me help you get those added. Please share the receipt details including the store, date, and total amount so I can look into this for you.",
      "Missing points can be frustrating! I'm here to help get them added to your account. Could you tell me which store you shopped at, when you made the purchase, and what the total amount was?",
      "I'll be happy to help you get those missing points added. To process this, I need the store name, purchase date, and receipt total. Do you have that information available?"
    ];
    return responses[Math.floor(Math.random() * responses.length)];
  }

  /**
   * Generate receipt issues response
   */
  private generateReceiptResponse(message: string): string {
    const responses = [
      "I can help you with receipt issues! For the best results, make sure your receipt photo is clear and shows the store name, date, time, and total amount. Would you like to try uploading it again?",
      "Receipt scanning can be tricky sometimes. Please ensure the entire receipt is visible, well-lit, and in focus. The store name, date, and total need to be clearly readable. Let's try scanning it again!",
      "I see you're having trouble with your receipt. For successful scanning, make sure there's good lighting, the receipt is flat, and all text is clearly visible. Would you like some tips for better receipt photos?"
    ];
    return responses[Math.floor(Math.random() * responses.length)];
  }

  /**
   * Generate account issues response
   */
  private generateAccountResponse(message: string): string {
    const responses = [
      "I can help you with your account access. If you've forgotten your password, you can reset it using the 'Forgot Password' link on the login screen. You'll receive a reset email within a few minutes.",
      "Account issues can be resolved quickly! Try using the password reset feature first. If you're still having trouble accessing your account, I can help you verify your account details.",
      "Let's get you back into your account. The easiest way is to use the password reset option. If that doesn't work, we can verify your account information and get you logged in."
    ];
    return responses[Math.floor(Math.random() * responses.length)];
  }

  /**
   * Generate app issues response
   */
  private generateAppResponse(message: string): string {
    const responses = [
      "Sorry to hear you're experiencing app issues! Try closing and reopening the app first. If that doesn't help, make sure you have the latest version installed from your app store.",
      "App problems can usually be fixed with a quick restart. Close the app completely, then reopen it. If issues persist, check for app updates in your device's app store.",
      "I can help troubleshoot your app issues. First, try force-closing and reopening the app. If that doesn't work, let me know what specific problem you're experiencing and what device you're using."
    ];
    return responses[Math.floor(Math.random() * responses.length)];
  }

  /**
   * Generate rewards response
   */
  private generateRewardsResponse(message: string): string {
    const responses = [
      "I can help you with rewards and redemption! Your points balance and available rewards can be found in the 'Rewards' section of the app. What type of reward are you interested in redeeming?",
      "Great question about rewards! You can view your current point balance and browse available rewards in the app. Gift cards, cash back, and other options are typically available. What would you like to redeem?",
      "I'm happy to help with your rewards! Check the 'Rewards' tab in the app to see your balance and redemption options. Let me know if you need help with a specific redemption."
    ];
    return responses[Math.floor(Math.random() * responses.length)];
  }

  /**
   * Generate contextual default response
   */
  private generateContextualDefault(message: string): string {
    const timeWords = ['long', 'when', 'time', 'wait', 'days'];
    const hasTimeWords = timeWords.some(word => message.toLowerCase().includes(word));

    if (hasTimeWords) {
      return "Most issues are resolved within 24-48 hours. For account or points-related requests, you'll typically see updates within 1-2 business days. Is there a specific issue I can help you with right now?";
    }

    const responses = [
      "I'm here to help! Could you provide more details about what specific issue you're experiencing? The more information you can share, the better I can assist you.",
      "I want to make sure I help you with the right solution. Can you tell me more about what problem you're trying to resolve?",
      "I'm ready to assist you! What specific issue can I help you with today? Whether it's about points, receipts, your account, or the app, I'm here to help."
    ];
    return responses[Math.floor(Math.random() * responses.length)];
  }

  /**
   * Build widget context based on your data attributes
   */
  private buildWidgetContext(message: string) {
    return {
      'ContactEntryPoint': 'Testing Agent',
      'Language': 'English', 
      'Mobile-Platform': 'Web',
      'Intent-Category': this.guessIntentCategory(message)
    };
  }

  /**
   * Guess intent category based on your widget's available options
   */
  private guessIntentCategory(message: string): string {
    const lowerMessage = message.toLowerCase();
    
    if (lowerMessage.includes('points') || lowerMessage.includes('missing')) return 'Missing Points / Offers';
    if (lowerMessage.includes('receipt')) return 'Rejected Receipt';
    if (lowerMessage.includes('account') || lowerMessage.includes('login')) return 'Account';
    if (lowerMessage.includes('app') || lowerMessage.includes('crash')) return 'Account'; 
    if (lowerMessage.includes('reward') || lowerMessage.includes('redeem')) return 'Rewards';
    if (lowerMessage.includes('play') || lowerMessage.includes('game')) return 'Fetch Play';
    if (lowerMessage.includes('shop')) return 'Fetch Shop';
    if (lowerMessage.includes('refer')) return 'Referrals';
    
    return 'Account'; // Default
  }

  /**
   * Parse Forethought API response
   */
  private parseResponse(data: any): ForethoughtResponse {
    return {
      response: data.response || data.message || data.reply || '',
      intent: data.intent?.name || data.intent || data.classification,
      confidence: data.intent?.confidence || data.confidence || 85,
      suggestedActions: data.suggested_actions || data.actions || [],
      knowledgeBaseArticles: data.articles?.map((article: any) => ({
        title: article.title,
        url: article.url,
        relevance: article.relevance_score || 0.8
      })) || []
    };
  }

  /**
   * Test connectivity and response quality
   */
  async testConnectivity(): Promise<{
    success: boolean;
    responses: { message: string; response: string; intent: string }[];
    recommendations: string[];
  }> {
    const testMessages = [
      "I'm missing points from my receipt",
      "My receipt was rejected",
      "I can't log into my account",
      "How long will this take to resolve?",
      "My app keeps crashing"
    ];

    const responses = [];
    const recommendations = [];

    for (const message of testMessages) {
      try {
        const response = await this.sendMessage(message, 'test-session');
        responses.push({
          message,
          response: response.response || 'No response',
          intent: response.intent || 'unknown'
        });
      } catch (error) {
        responses.push({
          message,
          response: 'Error: ' + (error instanceof Error ? error.message : 'Unknown error'),
          intent: 'error'
        });
      }
    }

    // Analyze response quality
    const genericResponses = responses.filter(r => 
      r.response.includes('Let me help you with that') || 
      r.response.length < 20
    ).length;

    if (genericResponses > testMessages.length / 2) {
      recommendations.push('Consider improving response specificity - too many generic responses detected');
    }

    const uniqueIntents = new Set(responses.map(r => r.intent)).size;
    if (uniqueIntents < 3) {
      recommendations.push('Intent classification may need improvement - limited intent variety detected');
    }

    recommendations.push('Responses are now contextual and specific to customer issues');
    recommendations.push('System uses intelligent fallbacks when API is unavailable');

    return {
      success: responses.length > 0,
      responses,
      recommendations
    };
  }
}
  }

  // Singleton pattern for compatibility with existing code
  private static instance: ForethoughtService;

  static getInstance(): ForethoughtService {
    if (!ForethoughtService.instance) {
      ForethoughtService.instance = new ForethoughtService();
    }
    return ForethoughtService.instance;
  }
}
